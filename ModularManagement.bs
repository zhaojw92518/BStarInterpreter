MACHINE ModularManagement

ATTRIBUTES
	#define SYSTEM_LIMIT_NUMBER_OF_PARTITIONS 		32 
	#define SYSTEM_LIMIT_NUMBER_OF_MESSAGES 		512 
	#define SYSTEM_LIMIT_MESSAGE_SIZE 				8192 
	#define SYSTEM_LIMIT_NUMBER_OF_PROCESSES 		128 
	#define SYSTEM_LIMIT_NUMBER_OF_SAMPLING_PORTS 	512 


	typedef unsigned char APEX_BYTE; /* 8-bit unsigned */
	typedef long APEX_INTEGER; /* 32-bit signed */
	typedef unsigned long APEX_UNSIGNED; /* 32-bit unsigned */
	typedef long long APEX_LONG_INTEGER; /* 64-bit signed */
	
	typedef char* NAME_TYPE;
	typedef char* ERROR_MESSAGE_TYPE;
	typedef int NUMBER_OF_PROCESSES_TYPE;

	typedef
		enum {
			NO_ERROR = 0, /* request valid and operation performed */
			NO_ACTION = 1, /* status of system unaffected by request */
			NOT_AVAILABLE = 2, /* resource required by request unavailable */
			INVALID_PARAM = 3, /* invalid parameter specified in request */
			INVALID_CONFIG = 4, /* parameter incompatible with configuration */
			INVALID_MODE = 5, /* request incompatible with current mode */
			TIMED_OUT = 6 /* time-out tied up with request has expired */
			} RETURN_CODE_TYPE;

	
	typedef char NAME_TYPE_MAX_NAME_LENGTH;
	typedef void (* SYSTEM_ADDRESS_TYPE);
	typedef APEX_BYTE * MESSAGE_ADDR_TYPE;
	typedef APEX_INTEGER MESSAGE_SIZE_TYPE;
	typedef APEX_INTEGER MESSAGE_RANGE_TYPE;
	typedef enum { SOURCE = 0, DESTINATION = 1 } PORT_DIRECTION_TYPE;
	typedef enum { FIFO = 0, PRIORITY = 1 } QUEUING_DISCIPLINE_TYPE;
	typedef APEX_LONG_INTEGER SYSTEM_TIME_TYPE; /* 64-bit signed integer with a 1 nanosecond LSB */
	
	typedef NAME_TYPE PROCESS_NAME_TYPE;

	typedef APEX_INTEGER PRIORITY_TYPE;
	
	

	typedef
		enum {
			IDLE = 0,
			COLD_START = 1,
			WARM_START = 2,
			NORMAL = 3
			} OPERATING_MODE_TYPE;

	typedef APEX_INTEGER PARTITION_ID_TYPE;

	typedef
		enum {
			NORMAL_START = 0,
			PARTITION_RESTART = 1,
			HM_MODULE_RESTART = 2,
			HM_PARTITION_RESTART = 3
			} START_CONDITION_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE PERIOD;
			SYSTEM_TIME_TYPE DURATION;
			PARTITION_ID_TYPE IDENTIFIER;
			LOCK_LEVEL_TYPE LOCK_LEVEL;
			OPERATING_MODE_TYPE OPERATING_MODE;
			START_CONDITION_TYPE START_CONDITION;
			} PARTITION_STATUS_TYPE; 

	

	typedef
		enum {
			DORMANT = 0,
			READY = 1,
			RUNNING = 2,
			WAITING = 3
			} PROCESS_STATE_TYPE;

	typedef enum { SOFT = 0, HARD = 1 } DEADLINE_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE PERIOD;
			SYSTEM_TIME_TYPE TIME_CAPACITY;
			SYSTEM_ADDRESS_TYPE ENTRY_POINT;
			STACK_SIZE_TYPE STACK_SIZE;
			PRIORITY_TYPE BASE_PRIORITY;
			DEADLINE_TYPE DEADLINE;
			PROCESS_NAME_TYPE NAME;
			} PROCESS_ATTRIBUTE_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE DEADLINE_TIME;
			PRIORITY_TYPE CURRENT_PRIORITY;
			PROCESS_STATE_TYPE PROCESS_STATE;
			PROCESS_ATTRIBUTE_TYPE ATTRS;
			} PROCESS_STATUS_TYPE;

	typedef
		struct {
			PROCESS_ID_TYPE ID;
			PROCESS_STATUS_TYPE STATUS;
			} PROCESS_TYPE;

	STACK_SIZE_TYPE MAX_PROCESS_STACK_SIZE;
	STACK_SIZE_TYPE MIN_PROCESS_STACK_SIZE;
	SYSTEM_TIME_TYPE MAX_PREOCESS_PERIOD;
	SYSTEM_TIME_TYPE MAX_PREOCESS_TIME_CAPACITY;
	SYSTEM_TIME_TYPE MAX_PREOCESS_TIME_OUT;
	SYSTEM_TIME_TYPE MAX_PREOCESS_DELAY_TIME;
	
	PROCESS_ID_TYPE ERROR_HANDLER_PROCESS_ID = 0;
	
	typedef enum { FALSE = 0, TRUE =1 } TIME_OUT_TYPE;
	
	typedef
		struct {
			PROCESS_ID_TYPE ID;
			SYSTEM_TIME_TYPE TIME_OUT;
			TIME_OUT_TYPE TIME_OUT_SIGNAL;
			} TIMER_TYPE;

	SYSTEM_TIME_TYPE MAX_BUDGET_TIME;

	typedef NAME_TYPE BUFFER_NAME_TYPE;
	typedef APEX_INTEGER BUFFER_ID_TYPE;

	typedef
		struct {
			MESSAGE_RANGE_TYPE NB_MESSAGE;
			MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			} BUFFER_STATUS_TYPE;

	typedef
		struct {
			BUFFER_ID_TYPE ID;
			BUFFER_NAME_TYPE NAME;
			BUFFER_STATUS_TYPE STATUS;
			} BUFFER_TYPE;

	typedef NAME_TYPE BLACKBOARD_NAME_TYPE;
	typedef APEX_INTEGER BLACKBOARD_ID_TYPE;
	typedef enum { EMPTY = 0, OCCUPIED = 1 } EMPTY_INDICATOR_TYPE;

	typedef
		struct {
			EMPTY_INDICATOR_TYPE EMPTY_INDICATOR;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			} BLACKBOARD_STATUS_TYPE;
	
	typedef
		struct {
			BLACKBOARD_ID_TYPE ID;
			BLACKBOARD_NAME_TYPE NAME;
			BLACKBOARD_STATUS_TYPE STATUS;
			} BLACKBOARD_TYPE;

	typedef NAME_TYPE SEMAPHORE_NAME_TYPE;
	typedef APEX_INTEGER SEMAPHORE_ID_TYPE;
	typedef APEX_INTEGER SEMAPHORE_VALUE_TYPE;



	typedef NAME_TYPE SAMPLING_PORT_NAME_TYPE;
	typedef APEX_INTEGER SAMPLING_PORT_ID_TYPE;
	typedef enum { INVALID = 0, VALID = 1 } VALIDITY_TYPE;

	typedef
		struct {
			SYSTEM_TIME_TYPE REFRESH_PERIOD;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			PORT_DIRECTION_TYPE PORT_DIRECTION;
			VALIDITY_TYPE LAST_MSG_VALIDITY;
			} SAMPLING_PORT_STATUS_TYPE;
    
	typedef
		struct {
			SAMPLING_PORT_ID_TYPE ID;
			SAMPLING_PORT_NAME_TYPE NAME;
			SAMPLING_PORT_STATUS_TYPE STATUS;
			}SAMPLING_PORT_TYPE;


	
	typedef NAME_TYPE QUEUING_PORT_NAME_TYPE;
	typedef APEX_INTEGER QUEUING_PORT_ID_TYPE;
	MESSAGE_RANGE_TYPE QUEUING_MAX_NB_MESSAGE;
	SYSTEM_TIME_TYPE MAX_SEND_QM_TIME_OUT;

	typedef
		struct {
			MESSAGE_RANGE_TYPE NB_MESSAGE;
			MESSAGE_RANGE_TYPE MAX_NB_MESSAGE;
			MESSAGE_SIZE_TYPE MAX_MESSAGE_SIZE;
			PORT_DIRECTION_TYPE PORT_DIRECTION;
			WAITING_RANGE_TYPE WAITING_PROCESSES;
			} QUEUING_PORT_STATUS_TYPE;




	APEX_INTEGER SYSTEM_NUMBER_OF_PARTITION;

	
	APEX_INTEGER Current_System_SPort_num;
	APEX_INTEGER Current_System_QPort_num;
	
	set<SAMPLING_PORT_TYPE> Current_system_sport_set;
	set<SAMPLING_PORT_TYPE> Current_partition_event_set;


OPERATIONS

/* 	      Inhibit_Process_Scheduling              */

	void _Inhibit_Process_Scheduling (
		 PARTITION_ID_TYPE PARTITION_ID )
	{
	}
	
	
/* 	      Shut_Down_Current_Partition             */
	void _Shut_Down_Current_Partition (
		 PARTITION_ID_TYPE PARTITION_ID )
	{
	}


/* 	      _Switch_Back_Initialization_Mode          */
	void _Switch_Back_Initialization_Mode (
		 PARTITION_ID_TYPE PARTITION_ID )
	{
	}
 
	
/*	      Integer_Multiple                        */
	SYSTEM_TIME_TYPE _Integer_Multiple (
		SYSTEM_TIME_TYPE INPUT_TIME )
	{
	}
	
/* 	      New Process                             */
	PROCESS_TYPE _New_PROCESS ()
	{
	}

/* 	      Initialize Process Context              */
	void _Initialize_Process_Context (
		PROCESS_ID_TYPE ID )
	{
	}
	

END
